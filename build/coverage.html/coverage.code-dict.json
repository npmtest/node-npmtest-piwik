{"/home/travis/build/npmtest/node-npmtest-piwik/test.js":"/* istanbul instrument in package npmtest_piwik */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-piwik/lib.npmtest_piwik.js":"/* istanbul instrument in package npmtest_piwik */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_piwik = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_piwik = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-piwik/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-piwik && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_piwik */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_piwik\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_piwik.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_piwik.rollup.js'] =\n            local.assetsDict['/assets.npmtest_piwik.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_piwik.__dirname + '/lib.npmtest_piwik.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-piwik/node_modules/piwik/piwik.js":"/*\nName:           piwik\nDescription:    Access a Piwik API or track hits with node.js\nAuthor:         Franklin van de Meent (https://frankl.in)\nSource & docs:  https://github.com/fvdm/nodejs-piwik\nFeedback:       https://github.com/fvdm/nodejs-piwik/issues\nLicense:        Unlicense / Public Domain (see UNLICENSE file)\n                (https://github.com/fvdm/nodejs-piwik/raw/develop/UNLICENSE)\n*/\n\nvar urltool = require ('url');\nvar querystring = require ('querystring');\nvar http = require ('httpreq');\nvar app = {\n  settings: {\n    timeout: 5000\n  }\n};\n\n\n/**\n * Callback an error\n *\n * @callback callback\n * @param msg {string} - Error.message\n * @param err {mixed} - Error.error\n * @param code {number|null} - Error.code, i.e. `res.statusCode`\n * @param callback {function} - `function (error) {}`\n * @return {void}\n */\n\nfunction callbackError (msg, err, code, callback) {\n  var error = new Error (msg);\n\n  error.error = err;\n  error.code = code;\n  callback (error);\n}\n\n\n/**\n * Process talk() response\n *\n * @callback callback\n * @param err {Error} - Response error\n * @param res {object} - Response resource\n * @param [callback] {function} - Optional `function (err, res) {}`\n * @returns {void}\n */\n\nfunction processResponse (err, res, callback) {\n  var data = res && res.body || null;\n\n  if (err) {\n    callbackError ('request failed', err, null, callback);\n    return;\n  }\n\n  try {\n    data = JSON.parse (data);\n\n    if (data.result && data.result === 'error') {\n      callbackError ('api error', data.message, null, callback);\n      return;\n    }\n  } catch (e) {\n    callbackError ('response invalid', e, null, callback);\n    return;\n  }\n\n  if (res && res.statusCode && res.statusCode >= 300) {\n    callbackError ('http error', data, res.statusCode, callback);\n    return;\n  }\n\n  if (callback) {\n    callback (null, data);\n  }\n}\n\n\n/**\n * API communication\n *\n * @callback props.callback\n * @param props {object} - Response resource\n * @param [props.method] {string=GET} - HTTP method: GET, POST\n * @param [props.path] {string=/} - Request path after hostname\n * @param [props.timeout] {number-5000} - Request time out in ms\n * @param [props.query] {object} - Data fields to send along\n * @param [props.body] {string} - POST JSON encoded body\n * @param [props.callback] {function} - Optional `function (err, res) {}`\n * @returns {void}\n */\n\nfunction talk (props) {\n  var key;\n  var options = {\n    url: app.settings.baseURL + (props.path || ''),\n    method: props.method,\n    headers: {},\n    timeout: props.timeout || app.settings.timeout\n  };\n\n  // build request\n  if (props.query instanceof Object) {\n    for (key in props.query) {\n      if (typeof props.query[key] === 'object') {\n        props.query[key] = JSON.stringify (props.query[key]);\n      }\n    }\n  }\n\n  if (props.query) {\n    options.parameters = props.query;\n  } else if (props.body) {\n    options.body = props.body;\n    options.headers['Content-Type'] = 'application/json';\n    options.headers['Content-Length'] = options.body.length;\n  }\n\n  // send request\n  http.doRequest (options, function (err, res) {\n    processResponse (err, res, props.callback);\n  });\n}\n\n\n/**\n * Setup basics\n *\n * @param baseURL {string} - Piwik URL\n * @param [token] {string=baseURL token_auth} - Piwik API token\n * @param [timeout] {number} - Request time out in ms\n * @returns app {object}\n */\n\nfunction methodSetup (baseURL, token, timeout) {\n  var url = urltool.parse (baseURL, true);\n\n  app.settings.baseURL = url.protocol + '//' + url.host\n    + url.pathname.replace (/\\/[^\\/]+$/, '/');\n\n  // token in baseURL?\n  app.settings.token = url.query && url.query.token_auth || null;\n\n  // override with custom token, and set timeout\n  if (typeof token === 'number') {\n    timeout = token;\n  } else if (token) {\n    app.settings.token = token;\n  }\n\n  app.settings.timeout = timeout || app.settings.timeout;\n  return app;\n}\n\n\n/**\n * API call\n *\n * @callback callback\n * @callback callback\n * @param [vars] {object} - Parameters\n * @param [callback] {function} - `function (err, res) {}`\n * @returns app {object}\n */\n\nfunction methodApi (vars, callback) {\n  vars = typeof vars === 'object' ? vars : {};\n  vars.module = 'API';\n  vars.format = 'JSON';\n  vars.token_auth = app.settings.token;\n\n  talk ({\n    method: 'GET',\n    path: 'index.php',\n    query: vars,\n    callback: callback || null\n  });\n\n  return app;\n}\n\n\n/**\n * Convert tracking object to full querystring\n *\n * @param obj {object} - The tracking object\n * @return {string} - Full querystring for request\n */\n\nfunction trackObject2request (obj) {\n  var keys = Object.keys (obj);\n  var key;\n  var val;\n  var i;\n\n  for (i = 0; i < keys.length; i++) {\n    key = keys[i];\n    val = obj[key];\n\n    if (typeof val === 'object') {\n      val = JSON.stringify (val);\n    }\n\n    obj[key] = val;\n  }\n\n  obj.rec = 1;\n  obj.apiv = 1;\n  return '?' + querystring.stringify (obj);\n}\n\n\n/**\n * Track one or multiple hits\n *\n * @callback callback\n * @param vars {object|array} - Parameters or array with parameters objects\n * @param [callback] {function} - Optional `function (err, res) {}`\n * @returns app {object}\n */\n\nfunction methodTrack (vars, callback) {\n  var bulk = {\n    requests: []\n  };\n  var i;\n\n  if (app.settings.token) {\n    bulk.token_auth = app.settings.token;\n  }\n\n  if (vars instanceof Array && vars[0] instanceof Object) {\n    // array with objects\n    for (i = 0; i < vars.length; i++) {\n      bulk.requests.push (trackObject2request (vars[i]));\n    }\n  } else if (vars instanceof Object) {\n    // object\n    bulk.requests.push (trackObject2request (vars));\n  }\n\n  talk ({\n    method: 'POST',\n    path: 'piwik.php',\n    body: JSON.stringify (bulk),\n    callback: function (err, data) {\n      if (err && callback) {\n        callback (err);\n        return;\n      }\n\n      if (data.status === 'success' && callback) {\n        callback (null, data);\n      } else if (callback) {\n        callbackError ('track failed', data, null, callback);\n      }\n    }\n  });\n\n  return app;\n}\n\n\n/**\n * Get spammers list from Github repo\n *\n * @callback callback\n * @param callback {function}\n * @returns app {object}\n */\n\nfunction methodLoadSpammers (callback) {\n  var options = {\n    timeout: app.settings.timeout\n  };\n\n  http.get (\n    'https://github.com/piwik/referrer-spam-blacklist/raw/master/spammers.txt',\n    options,\n    function (err, res) {\n      var data;\n\n      if (err) {\n        callback (err);\n      } else {\n        data = res.body\n          .trim()\n          .replace (/\\s+\\n/g, '\\n')\n          .split ('\\n')\n          .sort();\n\n        callback (null, data);\n      }\n    }\n  );\n\n  return app;\n}\n\n\n// module\napp.setup = methodSetup;\napp.api = methodApi;\napp.track = methodTrack;\napp.loadSpammers = methodLoadSpammers;\nmodule.exports = app;\n"}